#!/usr/bin/python

''' pms

    https://github.com/np1/pms

    Copyright (C)  2013 nagev

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  '''

__version__ = "0.10"
__author__ = "nagev"
__license__ = "GPLv3"

import subprocess
import logging
import time
import json
import sys
import re
import os

# Python 3 compatibility hack
compat_input = None
if sys.version_info[:2] >= (3, 0):
    from urllib.request import build_opener
    from urllib.error import HTTPError
    py2utf = lambda x: x
    compat_input = input
else:
    from urllib2 import build_opener
    from urllib2 import HTTPError
    py2utf = lambda x: x.encode("utf8")
    compat_input = raw_input

#logging.basicConfig(level=logging.DEBUG)

PLAYER = "mplayer"
PLAYERARGS = "-nolirc -nocache -prefer-ipv4 -really-quiet"
COLOURS = True
DDIR = os.path.join(os.path.expanduser("~"), "Downloads", "PMS")

if os.name == "nt":  # Disable colours for Windows
    COLOURS = False
else:
    try:
        import readline  # import readline if not running on windows
        readline.get_history_length()  # redundant, prevents unused import warn
    except ImportError:
        pass  # no biggie

opener = build_opener()
opener.addheaders = [("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; "
                      "Windows NT 6.1; WOW64; Trident/5.0)")]
urlopen = opener.open


def tidy(raw, field):

    r" Tidies HTML entities, formats songlength if field is duration "

    if field == "duration":
        raw = time.strftime('%M:%S', time.gmtime(int(raw)))
    else:
        for r in (("&#039;", "'"), ("&amp;#039;", "'"), ("&amp;amp;", "&"),
                 ("  ", " "), ("&amp;", "&"), ("&quot;", '"')):
            raw = raw.replace(r[0], r[1])
    return raw


def get_tracks_from_page(page):

    r" Gets search results from web page "

    fields = "duration file_id singer song link rate size source".split()
    matches = re.findall(r"\<li.(duration[^>]+)\>", page)
    songs = []
    if matches:
        for song in matches:
            cursong = {}
            for f in fields:
                v = re.search(r'%s=\"([^"]+)"' % f, song)
                if v:
                    cursong[f] = tidy(v.group(1), f)
                else:
                    raise Exception("problem with field " + f)
            songs.append(cursong)
    else:
        logging.debug("got unexpected webpage or no search results")
        return False
    return songs


def generate_song_meta(song):

    r" Generates formatted song metadata, displayed during playback "

    fields = "singer song duration rate size".split(" ")
    names = "Artist Title Length Bitrate Size".split(" ")
    maxlen = max([len(song.get(f) or "-" * 18) for f in fields])
    hyphens = min(78, maxlen + 10)
    hyphenstr = ("  " + "-" * hyphens + "\n")
    fmt = "  %s%-7s%s : %s%s%s\n"
    out = "\n" + hyphenstr
    for n, name in enumerate(names):
        if song[fields[n]]:
            out += (fmt % (c.y, name, c.w, c.g, song[fields[n]], c.w))
    return out + hyphenstr


def generate_choices(songs):

    r" Generates list of choices from a song list"

    fmtrow = "%s%-6s %-7s %-21s %-22s %-8s %-8s%s\n"
    out = (fmtrow % (c.g, "Item", "Size", "Artist", "Track", "Length",
           "Bitrate", c.w))
    out += (fmtrow % (c.w, "----", "----", "------", "-----", "------",
            "-------", c.w))
    for n, x in enumerate(songs):
        col = c.r if n % 2 == 0 else c.p
        size = x.get('size') or 0
        title = x.get('song') or "unknown title"
        artist = x.get('singer') or "unknown artist"
        duration = x.get('duration') or "unknown length"
        bitrate = x.get('rate') or "unknown"
        out += (fmtrow % (col, str(n + 1), str(size)[:3] + " Mb", artist[:20],
                title[:21], duration[:8], bitrate[:3], c.w))
    return out


def get_stream(song):

    r" Return the url for a song "

    if not "track_url" in song:
        url = 'http://pleer.com/site_api/files/get_url?action=download&id=%s'
        url = url % song['link']
        wdata = urlopen(url).read().decode("utf8")
        j = json.loads(wdata)
        track_url = j['track_link']
        return track_url
    else:
        return song['track_url']


def playsong(song):

    r" Play song using PLAYER called with args PLAYERARGS "

    track_url = get_stream(song)
    song['track_url'] = track_url
    print("Playing - [%sq%s] to quit.." % (c.y, c.w))
    print("")
    try:
        opener.open(track_url).headers['content-length']
    except IOError:
        print("\nSorry, this track no longer exists!")
    try:
        cmd = [PLAYER] + PLAYERARGS.split() + [song['track_url']]
        subprocess.call(cmd)
    except OSError:
        print("{}{}{} not found on this system".format(c.y, PLAYER, c.w))
        time.sleep(2)


def dosearch(term):

    r" Perform search or fetch playlist, returns songs list "

    if not term:
        logging.debug("no search term")
        return False
    elif term.startswith("\\list"):
        playlist = re.search("(list(\w){8,13})", term)
        if not playlist:
            print("invalid playlist")
            return False
        else:
            url = "http://pleer.com/en/" + playlist.group(1)
            print("\nfetching playlist %s%s%s\n" % (c.y, url, c.w))
    else:
        print("\nSearching for '%s%s%s'\n" % (c.y, term, c.w))
        url = "http://pleer.com/search?q=%s&target=tracks&page=%s"
        url = url % (term.replace(" ", "+"), 1)
    try:
        wdata = urlopen(url).read().decode("utf8")
        songs = get_tracks_from_page(wdata)
    except HTTPError:
        songs = None
    return songs


def download(song):

    r" Downloads file, shows status "

    if not os.path.exists(DDIR):
        os.makedirs(DDIR)
    filename = song['singer'][:30] + " - " + song['song'][:30] + ".mp3"
    filename = os.path.join(DDIR, filename)
    print("\nDownloading %s%s%s .." % (c.g, filename, c.w))
    status_string = ('  {0}{1:,}{2} Bytes [{0}{3:.2%}{2}] received. Rate: '
                     '[{0}{4:4.0f} kbps{2}].  ETA: [{0}{5:.0f} secs{2}]')
    song['track_url'] = get_stream(song)
    resp = urlopen(song['track_url'])
    total = int(resp.info()['Content-Length'].strip())
    chunksize, bytesdone, t0 = 16384, 0, time.time()
    outfh = open(filename, 'wb')
    while True:
        chunk = resp.read(chunksize)
        outfh.write(chunk)
        elapsed = time.time() - t0
        bytesdone += len(chunk)
        rate = (bytesdone / 1024) / elapsed
        eta = (total - bytesdone) / (rate * 1024)
        stats = (c.y, bytesdone, c.w, bytesdone * 1.0 / total, rate, eta)
        if not chunk:
            outfh.close()
            break
        status = status_string.format(*stats)
        sys.stdout.write("\r" + status + ' ' * 4 + "\r")
        sys.stdout.flush()
    print("\n%sDone\n" % c.y)


def get_input(songs):

    r' gets input, returns action/value '

    if not songs:
        return("nilinput", None)

    txt = ("[{0}1-{1}{2}] to play or [{0}d 1-{1}{2}] to download or [{0}q{2}]"
           "uit or enter new search\n > ".format(c.g, len(songs), c.w))
    r = {'nil': r'\s*$',
         'play': r'\s*(\d{1,3})',
         'dl': r'\s*(?:d|dl|download|down)(?:\s)*(\d{1,3})',
         'quit': r'\s*(q|quit)\s*$'}

    choice = compat_input(txt)
    r = {a: re.compile(k, re.IGNORECASE) for a, k in r.items()}

    if r['quit'].match(choice):
        sys.exit("{}(c) 2013 nagev.  Thanks for coming..{}".format(c.b, c.w))

    elif r['nil'].match(choice):
        return ("nilerror", None)

    elif r['play'].match(choice) or r['dl'].match(choice):
        return _play_dl_check(choice, r, songs)

    else:
        return ("search", choice)


def _play_dl_check(choice, r, songs):

    r''' Checks whether track to play or download is in range, returns track
         or rangeerror '''

    if r['play'].match(choice):
        songnum = int(r['play'].match(choice).group(1))
        try:
            return ("play", songs[songnum - 1])
        except IndexError:
            return ("rangeerror", songnum)

    elif r['dl'].match(choice):
        songnum = int(r['dl'].match(choice).group(1))
        try:
            return ("download", songs[songnum - 1])
        except IndexError:
            return ("rangeerror", songnum)


def songaction(action, value):

    r' Plays or downloads the song specified in `value`.  Returns msg on error'

    if action == "play":
        print(py2utf(generate_song_meta(value)))
        playsong(value)
    elif action == "download":
        download(value)
    elif action == "rangeerror" or action == "nilerror":
        value = value or "zilch"
        return("Sorry, %s%s%s is not a valid choice" % (c.g, value, c.w))


def song_selection_loop(songs):

    r''' main control loop; show song list, get user input via get_input()
         call songaction() for play/download '''

    sactions = "play download rangeerror nilerror".split()
    print(py2utf(generate_choices(songs)))
    action, value = get_input(songs)
    while action in sactions:
        status = songaction(action, value)
        print(py2utf(generate_choices(songs)))
        if status:
            print(status)
        action, value = get_input(songs)
    if action == "search":
        start(value)


def get_top_period(period):

    r''' Get top music for period, returns songs list '''

    url = ("http://pleer.com/en/gettopperiod?target1=%s&target2=r1&select=e&"
           "page_ru=1&page_en=%s")
    url = url % ("e%s" % period, 1)
    wdata = urlopen(url).read().decode("utf8")
    match = re.search(r"<ol id=\"search-results\">[\w\W]+?<\/ol>", wdata)
    html_ol = match.group(0)
    songs = get_tracks_from_page(html_ol)
    return songs


def start(args, cmdline=None):

    if cmdline:
        args = " ".join(args).strip()
    tops = "\\top \\top3m \\top6m \\topyear \\topall".split()
    if args in tops:
        songs = get_top_period(tops.index(args) + 1)
    else:
        songs = dosearch(args)
    if not args:
        inp = compat_input("Enter artist/song to search or \\top \\top3m \\top6m"
                           " \\topyear \\topall for top music or \\list [code playlist]")
        start(inp)
    elif not songs:
        print("Sorry, nothing matched %s%s%s" % (c.g, args, c.w))
        start(None)
    elif songs:
        song_selection_loop(songs)


class c(object):

    r' Class for holding colour code values '

    white = "\033[0m"
    red, green, yellow, blue, pink = ["\x1b[%sm" % n for n in range(91, 96)]
    if not COLOURS:
        red = green = yellow = blue = pink = white = ""
    r, g, y, b, p, w = red, green, yellow, blue, pink, white

start(sys.argv[1:], True)
